load_events <- function (connectionDetails)
{

	runStep <- function(sql, fileQuery) {
		if (sqlOnly) {
			writeLines(paste0("Saving to output/", sql))
			SqlRender::writeSql(sql, paste0("output/", fileQuery))
		} else {
			writeLines(paste0("Running: ", fileQuery))
			DatabaseConnector::executeSql(conn, sql)
		}
	}
	
	# person
	fileQuery <- "insert_person.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	# observation period
	fileQuery <- "insert_observation_period.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	# visit occurrence
	fileQuery <- "insert_visit_occurrence.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema
	)
	runStep(sql,fileQuery)
	
	# condition occurrence
	fileQuery <- "insert_condition_occurrence.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	# observation
	fileQuery <- "insert_observation.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	# measurement
	fileQuery <- "insert_measurement.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema,
		synthea_version = syntheaVersion
	)
	runStep(sql,fileQuery)
	
	# procedure occurrence
	fileQuery <- "insert_procedure_occurrence.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema,
		synthea_version = syntheaVersion
	)
	runStep(sql,fileQuery)
	
	# drug exposure
	fileQuery <- "insert_drug_exposure.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	# condition era
	fileQuery <- "insert_condition_era.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema
	)
	runStep(sql,fileQuery)
	
	# drug era
	fileQuery <- "insert_drug_era.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema
	)
	runStep(sql,fileQuery)
	
	# cdm source
	fileQuery <- "insert_cdm_source.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema
	)
	runStep(sql,fileQuery)
	
	# visit detail
	fileQuery <- "insert_visit_detail.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema
	)
	runStep(sql,fileQuery)
	
	# device exposure
	fileQuery <- "insert_device_exposure.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	# death
	fileQuery <- "insert_death.sql"
	sql <- SqlRender::loadRenderTranslateSql(
		sqlFilename = file.path(sqlFilePath, fileQuery),
		packageName = "ETLSyntheaBuilder",
		dbms = connectionDetails$dbms,
		cdm_schema = cdmSchema,
		synthea_schema = syntheaSchema
	)
	runStep(sql,fileQuery)
	
	if (!sqlOnly) {
		DatabaseConnector::disconnect(conn)
	}
}
